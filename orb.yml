version: "2.1"
description: "enables convenient usage of gobenchdata via circleci"
display:
    home_url: https://github.com/bobheadxi/gobenchdata/
    source_url: https://github.com/bobheadxi/gobenchdata/blob/master/circleci/orb.yml
commands:
    execute:
        parameters:
            count:
                description: Number of benchmark iterations to run
                type: string
                default: "1000x"
            match:
                description: Name to match for determining benchmarks to run
                type: string
                default: "."
            path:
                description: Path to benchmarks to run
                type: string
                default: ""
            options:
                description: Options to pass into the `go test` command
                type: string
                default: "-benchmem"
            output:
                description: Path to output results to
                type: string
                default: "bench.txt"
            timeout:
                description: Test timeout in time.Duration values
                type: string
                default: "600s"
        steps:
            - run:
                name: "Run Benchmarks And Store Results"
                command: go test -timeout="<< parameters.timeout >>" -bench="<< parameters.match >>" --benchtime "<< parameters.count >>" "<< parameters.path >>" "<< parameters.options >>" > "<< parameters.output >>"
    parse:
        parameters:
            file:
                description: File containing benchmark samples
                type: string
                default: "bench.txt"
            output:
                description: File to store parsed data into
                type: string
                default: "new_benchmarks.json"
        steps:
            - run:
                name: "Parse Benchmark Results And Generate GoBenchData Output"
                command: cat "<< parameters.file >>" | gobenchdata --json "<< parameters.output >>"
    checks:
        parameters:
            input_benchmarks_out:
                description: Previous benchmarks to compare against
                type: string
                default: "benchmarks.json"
            run_output:
                description: New benchmarks to compare against
                type: string
                default: "new_benchmarks.json"
            checks_config:
                description: Location for checks configuration file
                type: string
                default: "gobenchdata-checks.yml"
            checks_output:
                description: Location to store checks comparison in
                type: string
                default: "checks-results.json"
            options:
                description: Optional flags to pass into checks
                type: string
                default: "--flat"
            clone_user:
                description: User to use with git clone
                type: string
            publish_branch:
                description: Branch data is published against
                type: string
                default: gh-pages
            vcs_host:
                description: Host to pull git repo from
                type: string
                default: github.com
        steps:
            - run:
                name: "Fetch Previous Data"
                command: git clone https://"<< parameters.vcs_host >>"/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME} /tmp/${CIRCLE_PROJECT_REPONAME}
            - run:
                name: "Checkout Publish Branch"
                command: |
                    cd /tmp/${CIRCLE_PROJECT_REPONAME}
                    git checkout "<< parameters.publish_branch >>"
            - run:
                name: "Compare Benchmarks"
                command: |
                    cd /tmp/${CIRCLE_PROJECT_REPONAME}
                    gobenchdata checks eval "<< parameters.input_benchmarks_out >>" "<< parameters.run_output >>" \
                        --checks.config "<< parameters.checks_config >>" \
                        --json "<< parameters.checks_output >>" \
                        "<< parameters.options >>"
    publish:
        parameters:
            input_benchmarks_out:
                description: Previous benchmarks to compare against
                type: string
                default: "benchmarks.json"
            run_output:
                description: New benchmarks to compare against
                type: string
                default: "new_benchmarks.json"
            options:
                description: Optional flags to pass into checks
                type: string
                default: "--flat"
            clone_user:
                description: User to use with git clone
                type: string
            publish_branch:
                description: Branch data is published against
                type: string
                default: gh-pages
            prune_count:
                description: "Number of past runs to keep (0 = keep everything)"
                type: integer
            input_commit_message:
                description: Commit message to use for publish
                type: string
                default: "add benchmark run for ${CIRCLE_SHA1}"
        steps:
            - run:
                name: "Merge Results"
                command: |
                    if [[ -f "<< parameters.input_benchmarks_out >>" ]]; then
                        gobenchdata merge "<< parameters.run_output >>" "<< parameters.input_benchmarks_out >>" \
                            --prune "<< parameters.prune_count >>" \
                            --json  "<< parameters.input_benchmarks_out >>" \
                            "<< parameters.options >>"
                    else
                        cp "<< parameters.run_output >>" "<< parameters.input_benchmarks_out >>"
                    fi
            - run:
                name: "Publish results"
                command: |
                    git add .
                    git commit -m "<< parameters.input_commit_message >>"
                    git push -f origin "<< parameters.publish_branch >>"


